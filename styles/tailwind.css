/*
 * THIS FILE IS GENERATED BY tailwind.mjs
 * DO NOT EDIT IT DIRECTLY.
 */

@theme {
	--breakpoint-*: initial;
	--breakpoint-dt: 800px;

  --color-*: initial;
	--color-primary: #ffffff;
	--color-secondary: #000000;
	--color-contrast: #e30613;
    
  --spacing: 0.25rem;
	--spacing-margin: var(--device-margin);
	--spacing-gap: var(--device-gap);

  /* TODO: This should be configurable */
  --font-mono: var(--font-mono);
}

@utility design-grid {
	display: grid;
	grid-template-columns: repeat(var(--device-columns), 1fr);
	gap: var(--device-gap);
}

@utility layout-block {
	margin-inline: auto;
	width: calc(100% - 2 * var(--device-margin));
}

@utility layout-block-inner {
	padding-inline: var(--device-margin);
	width: 100%;
}

@utility layout-grid {
	@apply layout-block design-grid;
}

@utility layout-grid-inner {
	@apply layout-block-inner design-grid;
}

@custom-variant light (&:where([data-theme=light], [data-theme=light *]));
@custom-variant dark (&:where([data-theme=dark], [data-theme=dark *]));
@custom-variant red (&:where([data-theme=red], [data-theme=red *]));

:root {
	--mobile-width: 375;
	--mobile-height: 650;
	--desktop-width: 1440;
	--desktop-height: 816;

	--mobile-columns: calc(((4 * 100) / var(--device-width)) * 1vw);
	--desktop-columns: calc(((12 * 100) / var(--device-width)) * 1vw);
--mobile-gap: calc(((16 * 100) / var(--device-width)) * 1vw);
	--desktop-gap: calc(((16 * 100) / var(--device-width)) * 1vw);
--mobile-margin: calc(((16 * 100) / var(--device-width)) * 1vw);
	--desktop-margin: calc(((16 * 100) / var(--device-width)) * 1vw);

	--max-width: 9999;

	--device-width: var(--mobile-width);
	--device-columns: var(--mobile-columns);
	--device-gap: var(--mobile-gap);
	--device-margin: var(--mobile-margin);

	@variant dt {
		--device-width: var(--desktop-width);
		--device-columns: var(--desktop-columns);
		--device-gap: var(--desktop-gap);
		--device-margin: var(--desktop-margin);
	}
}

@utility fw-* {
	width: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fh-* {
	height: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility ftext-* {
	font-size: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fgap-* {
	gap: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fgap-x-* {
	column-gap: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fgap-y-* {
	row-gap: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fp-* {
	padding: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fpx-* {
	padding-inline: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fpy-* {
	padding-block: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fpt-* {
	padding-top: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fpr-* {
	padding-right: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fpl-* {
	padding-left: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}

@utility fpb-* {
	padding-bottom: calc(((--value(integer) * 100) / var(--device-width)) * min(1vw, var(--max-width) / 100 * 1px));
}